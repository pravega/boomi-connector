<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<xs:schema version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:jxb="http://java.sun.com/xml/ns/jaxb"
           jxb:version="2.0">

    <!--
        Copyright (c) 2008
        Boomi, Inc.
    -->

    <xs:include schemaLocation="genericconfig.xsd"/>

    <xs:element name="GenericConnectorDescriptor" type="GenericConnectorDescriptor"/>

    <xs:complexType name="GenericConnectorDescriptor">
        <xs:annotation>
            <xs:documentation xml:lang="en">
                Complete configuration for the connector.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="description" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property><jxb:javadoc>
                            Optional text string describing the connector which will be displayed in the GUI.
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="field" type="ConnectionFieldConfig" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property name="fields"><jxb:javadoc>
                            Fields which are necessary in order to do pretty much anything with a connector.  This
                            will generally include configuration information like username and password.  The values
                            the user enters for these fields will be provided to the {@link Connector#createOperation}
                            method and the {Connector#createBrowser} method if the requireConnectorForBrowse flag is
                            enabled.&lt;p&gt;
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="profileTypeMappings" type="ProfileTypeMappings" minOccurs="0">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property name="profileTypeMappings"><jxb:javadoc>
                            Type mappings that should be applied to all profiles for this connector.&lt;p&gt;
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="operation" type="OperationConfig" minOccurs="1" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property name="operations"><jxb:javadoc>
                            Configuration for the operations which the connector supports.  Even if no extra
                            configuration is necessary for the various operations, the union of all the OperationTypes
                            in the given OperationConfigs will define the operations supported by the connector, so
                            the connector is required to define at least one such configuration.&lt;p&gt;
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="dynamicProperty" type="DynamicPropertyConfig" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property name="dynamicProperties"><jxb:javadoc>
                            Dynamic Connector Properties could be set for a connector.  This
                            will generally include extended configuration information like fileName or folder.  The values
                            the user enters for these properties will be provided in the TrackedData {@link TrackedData#getDynamicProperties}
                            method.&lt;p&gt;
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="trackedProperty" type="TrackedPropertyConfig" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property name="trackedProperties"><jxb:javadoc>
                            Tracked Fields which could be present for a connector.&lt;p&gt;
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="onPremiseBrowseOnly" type="xs:boolean" default="false">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        This has been deprecated in favor of browsingType.
                        If {@code true}, indicates that browsing with this connector will only work when the connector
                        is running on an Atom installed within the user's infrastructure.  Defaults to {@code false}.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="browsingType" type="BrowsingType">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        Describes the context(s) in which the connector will browse.  May be: on-premise atoms only,
                        the Boomi cloud only, or anywhere.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="requireConnectionForBrowse" type="xs:boolean" default="false">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        If {@code true}, indicates that connector browsing requires a connection (the
                        {@link BrowseContext#getConnectionProperties} map will contain the necessary connection
                        fields).  Defaults to {@code false}.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="dateTimeFormat" type="xs:string">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        Optional dateTime format pattern for generated profiles (following the rules for
                        SimpleDateFormat).  If at all possible, connector implementations should attempt to accept and
                        generate dateTime values compatible with the XML Schema dateTime type.  However, since this is
                        not always possible, a connector can specify the preferred dateTime format using this field.
                        If this value is configured, Boomi profiles generated for this connector will specify this
                        dateTimeFormat instead of the XML Schema format.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="disableDefaultObjectTypeFilter" type="xs:boolean" default="false"/>
    </xs:complexType>

    <xs:complexType name="OperationConfig">
        <xs:annotation>
            <xs:documentation xml:lang="en">
                Specification for operations supported by the connector.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="field" type="OperationFieldConfig" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property name="fields"><jxb:javadoc>
                            Fields which are necessary in order to execute specific operations using a connector.  The
                            values the user enters for these fields will be provided to the various {@link Connector}
                            operation methods.  If the includeInBrowse property is {@code true} for a given field, it
                            will also be provided to the {@link Browser} methods.&lt;p&gt;
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="queryFilter" type="QueryFilterConfig" minOccurs="0">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property><jxb:javadoc>
                            Configuration for the content of a QueryFilter passed to a query operation.  This
                            information is ignored on any OperationConfig which does not include the {@link
                            OperationType#QUERY} type.
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="types" type="xs:normalizedString" use="required">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        The set of types for which this operation config applies.&lt;p&gt;
                        This data is represented in xml as a String containing a pipe separated list of OperationTypes
                        (e.g. {@code "GET|QUERY|UPDATE"}) and supports the use of the {@code "*"} character to
                        indicate all method types.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="allowFieldSelection" type="xs:boolean" default="false">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        Whether the operation(s) specified by this configuration support user defined field selection
                        to determine which fields are returned in the response.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="fieldSelectionLevels" type="xs:int" default="2">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        The depth to which field selection selection should be enabled.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="supportsBrowse" type="xs:boolean" default="true">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        Whether the operation(s) specified by this configuration support browsing.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="inputType" type="InputOutputType" default="binary">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        The input type for the operation(s) specified by this configuration.  This is only relevant
                        when supportsBrowse is false.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="outputType" type="InputOutputType" default="binary">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        The output type for the operation(s) specified by this configuration This is only relevant
                        when supportsBrowse is false.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="fieldSelectionNone" type="xs:boolean" default="false">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        Whether the operation(s) specified by this configuration to support all field selection
                        by default. When set, none of the fields will be selected by default.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="customTypeId" type="xs:NCName">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        Defines a custom operation type that is outside of the standard types of GET, QUERY,
                        CREATE, EXECUTE, etc. This is currently only supported when the 'types' field is set
                        to 'EXECUTE'.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="customTypeLabel" type="xs:string">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        Sets the user visible name of this operation.  This string will be displayed to users
                        when they select the operation type. 
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="GenericFieldConfig" abstract="true">
        <xs:annotation>
            <xs:documentation xml:lang="en">
                Common specification for a field of information necessary in when working with a connector.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="helpText" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property><jxb:javadoc>
                            Optional help text displayed for the field in the GUI.
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="defaultValue" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property><jxb:javadoc>
                            Optional default value for this field presented to the user in the GUI.  This value must
                            be valid for the data type and optional format regular expression.
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="allowedValue" type="AllowedValueConfig" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property name="allowedValues"><jxb:javadoc>
                            Optional set of allowed values for this field.  If specified, GUI selection will be
                            restricted to one of these values.  These values must be valid for the data type and
                            optional format regular expression.&lt;p&gt;
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="oauth2FieldConfig" type="OAuth2FieldConfig" minOccurs="0">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property><jxb:javadoc>
                            Optional extended configuration for an OAuth2 field presented to the user in the GUI.
                            Only valid for a field of type OAUTH.
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="id" type="xs:NCName" use="required">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        The actual name of the field which will be passed as the property key to the connector.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="label" type="xs:normalizedString">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        Optional text string which will be displayed in the GUI for this field.  If not defined, the
                        id will be used.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="type" type="DataTypeConfig" use="required">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        The type of the property value which will be passed to the connector.  This will also restrict
                        what values may be entered in the GUI.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="formatRegex" type="xs:normalizedString">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        Optional Java regular expression which must match any valid value for this field.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="componentType" type="xs:string">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        Optional string describing the component type, if the DataTypeConfig is component.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="componentProperties" type="xs:string">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        Optional string describing any additional properties for the chooser, if the DataTypeConfig is
                        component.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="ConnectionFieldConfig">
        <xs:annotation>
            <xs:documentation xml:lang="en">
                Specification for a field of information necessary in order to make connection.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="GenericFieldConfig"/>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="DynamicPropertyConfig">
        <xs:annotation>
            <xs:documentation xml:lang="en">
                Specification for a dynamic field of information necessary in order to make connection.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="helpText" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property><jxb:javadoc>
                            Optional help text displayed for the field in the GUI.
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="id" type="xs:NCName" use="required">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        The actual name of the field which will be passed as the property key to the connector.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="label" type="xs:normalizedString">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        Optional text string which will be displayed in the GUI for this field.  If not defined, the
                        id will be used.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="type" type="DataTypeConfig" use="required">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        The type of the property value which will be passed to the connector.  This will also restrict
                        what values may be entered in the GUI.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="formatRegex" type="xs:normalizedString">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        Optional Java regular expression which must match any valid value for this field.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="TrackedPropertyConfig">
        <xs:annotation>
            <xs:documentation xml:lang="en">
                Specification for a tracked field of information necessary in order to track document.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="helpText" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property><jxb:javadoc>
                            Optional help text displayed for the field in the GUI.
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="id" type="xs:NCName" use="required">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        The actual name of the field which will be passed as the property key to the connector.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="label" type="xs:normalizedString">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        Optional text string which will be displayed in the GUI for this field.  If not defined, the
                        id will be used.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="OperationFieldConfig">
        <xs:annotation>
            <xs:documentation xml:lang="en">
                Specification for a field of information necessary in order to execute an operation.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="GenericFieldConfig">
                <xs:attribute name="includeInBrowse" type="xs:boolean" default="false">
                    <xs:annotation>
                        <xs:appinfo>
                            <jxb:property><jxb:javadoc>
                                This has been deprecated in favor of scope.
                                If {@code true}, this field will be included in browse operations for the relevant
                                method of a connector.  Defaults to {@code false}.
                            </jxb:javadoc></jxb:property>
                        </xs:appinfo>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="scope" type="FieldScope" default="operationOnly">
                    <xs:annotation>
                        <xs:appinfo>
                            <jxb:property><jxb:javadoc>
                                Defines the scope of the operation field.  Defaults to {@link
                        		FieldScope#OPERATION_ONLY}.
                            </jxb:javadoc></jxb:property>
                        </xs:appinfo>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="AllowedValueConfig">
        <xs:annotation>
            <xs:documentation xml:lang="en">
                Specification for an allowed value in a field.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="value" type="xs:string">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property><jxb:javadoc>
                            The allowed value, which must be valid for the data type of the owning GenericFieldConfig.
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="label" type="xs:normalizedString">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        Optional text string which will be displayed in the GUI for this value.  If not defined, the
                        value itself will be used.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:element name="QueryFilterConfig" type="QueryFilterConfig"/>

    <xs:complexType name="QueryFilterConfig">
        <xs:annotation>
            <xs:documentation xml:lang="en">
                Specification for the allowable content for a QueryFilter passed to a query operation.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="helpText" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property><jxb:javadoc>
                            Optional help text displayed for the filter in the GUI.
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="operator" type="SimpleExpressionOperatorConfig" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property name="operators"><jxb:javadoc>
                            The operators supported by the query operation.&lt;p&gt;
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="sortOrder" type="SimpleSortOrderConfig" maxOccurs="unbounded" minOccurs="0">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property name="sortOrders"><jxb:javadoc>
                            The sort orders supported by the query operation.&lt;p&gt;
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="grouping" type="GroupingExpressionConfig" default="any">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        The type of grouping/nesting supported by the query operation.  Defaults to {@link
                        GroupingExpressionConfig#ANY}.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="sorting" type="SortingConfig" default="none">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        The type of sorting supported by the query operation.  Defaults to {@link
                        SortingConfig#NONE}.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="SimpleExpressionOperatorConfig">
        <xs:annotation>
            <xs:documentation xml:lang="en">
                Specification for an operator supported in a query operation.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="helpText" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property><jxb:javadoc>
                            Optional help text displayed for the operator in the GUI.
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="supportedType" type="OperatorConfigDataType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property name="supportedTypes"><jxb:javadoc>
                            Optional data type(s) to limit the query operators available by type.
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="id" type="xs:NCName" use="required">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        The actual name of the operator which will be passed to the query operation.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="label" type="xs:normalizedString">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        Optional text string which will be displayed in the GUI for the operator.  If not defined, the
                        id will be used.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="numArguments" type="xs:int" default="1">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        The number of arguments used by the operator (besides the property name).  For example, a
                        {@code (foo is null)} expression would have 0 arguments, a {@code (foo lessThan value)}
                        expression would have 1 argument, and a {@code (foo between low high)} expression would have 2
                        arguments (where {@code foo} is the property name).  Defaults to 1.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="SimpleSortOrderConfig">
        <xs:annotation>
            <xs:documentation xml:lang="en">
                Specification for a sorting operator supported in a query operation.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="helpText" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property><jxb:javadoc>
                            Optional help text displayed for the operator in the GUI.
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="supportedType" type="OperatorConfigDataType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property name="supportedTypes"><jxb:javadoc>
                            Optional data type(s) to limit the query sort operators available by type.
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="id" type="xs:NCName" use="required">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        The actual name of the sort order which will be passed to the query operation.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="label" type="xs:normalizedString">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        Optional text string which will be displayed in the GUI for the operator.  If not defined, the
                        id will be used.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="OperatorConfigDataType">
        <xs:annotation>
            <xs:documentation xml:lang="en">
                Specification for limiting simple expression operators or sort orders by data type
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="type" type="xs:string" use="required">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        The data type of the fields that allow this operator
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="typeNamespace" type="xs:string">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        Optional namespace for ambiguous types.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:simpleType name="GroupingExpressionConfig">
        <xs:annotation>
            <xs:appinfo>
                <jxb:typesafeEnumClass>
                    <jxb:javadoc>
                        Type of grouping supported for the QueryFilter.
                    </jxb:javadoc>
                    <jxb:typesafeEnumMember name="NONE" value="none">
                        <jxb:javadoc>
                            The QueryFilter supports no groupings (only one expression allowed).&lt;p&gt;
                            Example: {@code (foo lessThan 30)}
                        </jxb:javadoc>
                    </jxb:typesafeEnumMember>
                    <jxb:typesafeEnumMember name="ANY" value="any">
                        <jxb:javadoc>
                            The QueryFilter supports any arbitrary grouping and nesting of AND's and OR's.&lt;p&gt;
                            Example: {@code ((foo lessThan 30) OR (baz lessThan 42) OR ((bar isNull) AND (bazz isNotNull))) AND (buzz greaterThan 55)}
                        </jxb:javadoc>
                    </jxb:typesafeEnumMember>
                    <jxb:typesafeEnumMember name="NO_NESTING_IMPLICIT_OR" value="noNestingImplicitOr">
                        <jxb:javadoc>
                            The QueryFilter supports any number of non-nested expressions which will be OR'ed
                            together.&lt;p&gt;
                            Example: {@code ((foo lessThan 30) OR (baz lessThan 42))}
                        </jxb:javadoc>
                    </jxb:typesafeEnumMember>
                    <jxb:typesafeEnumMember name="NO_NESTING_IMPLICIT_AND" value="noNestingImplicitAnd">
                        <jxb:javadoc>
                            The QueryFilter supports any number of non-nested expressions which will be AND'ed
                            together.&lt;p&gt;
                            Example: {@code ((foo lessThan 30) AND (baz lessThan 42))}
                        </jxb:javadoc>
                    </jxb:typesafeEnumMember>
                    <jxb:typesafeEnumMember name="SINGLE_NESTING_IMPLICIT_OR" value="singleNestingImplicitOr">
                        <jxb:javadoc>
                            The QueryFilter supports one level of nesting, where the top level groupings will be OR'ed
                            together and the nested expression groups will be AND'ed together.&lt;p&gt;
                            Example: {@code ((foo lessThan 30) AND (baz lessThan 42)) OR (buzz greaterThan 55)}
                        </jxb:javadoc>
                    </jxb:typesafeEnumMember>
                    <jxb:typesafeEnumMember name="SINGLE_NESTING_IMPLICIT_AND" value="singleNestingImplicitAnd">
                        <jxb:javadoc>
                            The QueryFilter supports one level of nesting, where the top level groupings will be
                            AND'ed together and the nested expression groups will be OR'ed together.&lt;p&gt;
                            Example: {@code ((foo lessThan 30) OR (baz lessThan 42)) AND (buzz greaterThan 55)}
                        </jxb:javadoc>
                    </jxb:typesafeEnumMember>
                </jxb:typesafeEnumClass>
            </xs:appinfo>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="none"/>
            <xs:enumeration value="any"/>
            <xs:enumeration value="noNestingImplicitOr"/>
            <xs:enumeration value="noNestingImplicitAnd"/>
            <xs:enumeration value="singleNestingImplicitOr"/>
            <xs:enumeration value="singleNestingImplicitAnd"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="SortingConfig">
        <xs:annotation>
            <xs:appinfo>
                <jxb:typesafeEnumClass>
                    <jxb:javadoc>
                        Type of sorting supported for the QueryFilter.
                    </jxb:javadoc>
                    <jxb:typesafeEnumMember name="NONE" value="none">
                        <jxb:javadoc>
                            The QueryFilter supports no sorting
                        </jxb:javadoc>
                    </jxb:typesafeEnumMember>
                    <jxb:typesafeEnumMember name="ONE" value="one">
                        <jxb:javadoc>
                            The QueryFilter supports one sorting statement.&lt;p&gt;
                            Example: {@code order by foo asc}
                        </jxb:javadoc>
                    </jxb:typesafeEnumMember>
                    <jxb:typesafeEnumMember name="UNBOUNDED" value="unbounded">
                        <jxb:javadoc>
                            The QueryFilter supports any number of sorting statements.&lt;p&gt;
                            Example: {@code order by foo asc, bar desc}
                        </jxb:javadoc>
                    </jxb:typesafeEnumMember>
                </jxb:typesafeEnumClass>
            </xs:appinfo>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="none"/>
            <xs:enumeration value="one"/>
            <xs:enumeration value="unbounded"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="BrowsingType">
        <xs:annotation>
            <xs:appinfo>
                <jxb:typesafeEnumClass>
                    <jxb:javadoc>
                        Type of browsing supported for the connector.
                    </jxb:javadoc>
                    <jxb:typesafeEnumMember name="ONPREMISE" value="onpremise">
                        <jxb:javadoc>
                            The connector may browse through on-premise Atoms only.
                        </jxb:javadoc>
                    </jxb:typesafeEnumMember>
                    <jxb:typesafeEnumMember name="CLOUD" value="cloud">
                        <jxb:javadoc>
                            The connector will browse through the Boomi Cloud.
                        </jxb:javadoc>
                    </jxb:typesafeEnumMember>
                    <jxb:typesafeEnumMember name="ANY" value="any">
                        <jxb:javadoc>
                            The connector may browse through a local Atom or through the Boomi Cloud.
                        </jxb:javadoc>
                    </jxb:typesafeEnumMember>
                </jxb:typesafeEnumClass>
            </xs:appinfo>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="onpremise"/>
            <xs:enumeration value="cloud"/>
            <xs:enumeration value="any"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="FieldScope">
        <xs:annotation>
            <xs:appinfo>
                <jxb:typesafeEnumClass>
                    <jxb:javadoc>
                        Scope of the field.
                    </jxb:javadoc>
                    <jxb:typesafeEnumMember name="OPERATION_ONLY" value="operationOnly">
                        <jxb:javadoc>
                            The field will be included on the operation.
                        </jxb:javadoc>
                    </jxb:typesafeEnumMember>
                    <jxb:typesafeEnumMember name="BROWSE_ONLY" value="browseOnly">
                        <jxb:javadoc>
                            The field will be included in the browse operation.
                        </jxb:javadoc>
                    </jxb:typesafeEnumMember>
                    <jxb:typesafeEnumMember name="BOTH" value="both">
                        <jxb:javadoc>
                            The field will be included on the operation and in the browse operation.
                        </jxb:javadoc>
                    </jxb:typesafeEnumMember>
                </jxb:typesafeEnumClass>
            </xs:appinfo>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="operationOnly"/>
            <xs:enumeration value="browseOnly"/>
            <xs:enumeration value="both"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="InputOutputType">
        <xs:annotation>
            <xs:appinfo>
                <jxb:typesafeEnumClass>
                    <jxb:javadoc>
                        Input/Output types.
                    </jxb:javadoc>
                    <jxb:typesafeEnumMember name="NONE" value="none">
                        <jxb:javadoc>
                            No data
                        </jxb:javadoc>
                    </jxb:typesafeEnumMember>
                    <jxb:typesafeEnumMember name="BINARY" value="binary">
                        <jxb:javadoc>
                            Data is binary
                        </jxb:javadoc>
                    </jxb:typesafeEnumMember>
                </jxb:typesafeEnumClass>
            </xs:appinfo>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="none"/>
            <xs:enumeration value="binary"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="ProfileTypeMappings">
        <xs:annotation>
            <xs:documentation xml:lang="en">
                Specification for how to map connector types to AtomSphere profile types.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="profileTypeMapping" type="ProfileTypeMapping" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property name="profileTypeMappings"><jxb:javadoc>
                            Specifications for how to map XSD types to Profile types.&lt;p&gt;
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ProfileTypeMapping">
        <xs:annotation>
            <xs:documentation xml:lang="en">
                Specification for how to an XSD type to AtomSphere profile type.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="ns" type="xs:string" use="required">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        The namespace of the type that you wish to map.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="type" type="xs:string" use="required">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        The name of the type that you wish to map.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="boomiType" type="BoomiType" use="required">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        The Boomi type to map to.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="format" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        Optional formatting pattern for generated profiles.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:simpleType name="BoomiType">
        <xs:annotation>
            <xs:appinfo>
                <jxb:typesafeEnumClass>
                    <jxb:javadoc>
                        Data types.
                    </jxb:javadoc>
                    <jxb:typesafeEnumMember name="CHARACTER" value="character">
                        <jxb:javadoc>
                            Character
                        </jxb:javadoc>
                    </jxb:typesafeEnumMember>
                    <jxb:typesafeEnumMember name="NUMBER" value="number">
                        <jxb:javadoc>
                            Number
                        </jxb:javadoc>
                    </jxb:typesafeEnumMember>
                    <jxb:typesafeEnumMember name="DATE_TIME" value="datetime">
                        <jxb:javadoc>
                            Date/Time
                        </jxb:javadoc>
                    </jxb:typesafeEnumMember>
                </jxb:typesafeEnumClass>
            </xs:appinfo>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="character"/>
            <xs:enumeration value="number"/>
            <xs:enumeration value="datetime"/>
        </xs:restriction>
    </xs:simpleType>


    <xs:simpleType name="FieldAccess">
        <xs:annotation>
            <xs:appinfo>
                <jxb:typesafeEnumClass>
                    <jxb:javadoc>
                        Scope of the field (controls how the user can interact with the field).
                    </jxb:javadoc>
                    <jxb:typesafeEnumMember name="HIDDEN" value="hidden">
                        <jxb:javadoc>
                            The default value will be included in the configuration but the field will not visible to
                            the user.
                        </jxb:javadoc>
                    </jxb:typesafeEnumMember>
                    <jxb:typesafeEnumMember name="READ_ONLY" value="readOnly">
                        <jxb:javadoc>
                            The default value will be included in the configuration and the field will be visible to
                            the user but not editable.
                        </jxb:javadoc>
                    </jxb:typesafeEnumMember>
                    <jxb:typesafeEnumMember name="ENABLED" value="enabled">
                        <jxb:javadoc>
                            The default value (if any) will be displayed in the the field, which will be visible to
                            the user and fully editable.  This is the default for a field.
                        </jxb:javadoc>
                    </jxb:typesafeEnumMember>
                </jxb:typesafeEnumClass>
            </xs:appinfo>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="hidden"/>
            <xs:enumeration value="readOnly"/>
            <xs:enumeration value="enabled"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="SubFieldConfig">
        <xs:annotation>
            <xs:documentation xml:lang="en">
                Specification for a sub-field (of a complex structure field) of information necessary in order to make
                connection.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="helpText" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property><jxb:javadoc>
                            Optional help text displayed for the sub-field in the GUI.
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="defaultValue" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property><jxb:javadoc>
                            Optional default value for this sub-field presented to the user in the GUI.  This value
                            must be valid for the data type.
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="allowedValue" type="AllowedValueConfig" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property name="allowedValues"><jxb:javadoc>
                            Optional set of allowed values for this sub-field.  If specified, GUI selection
                            will be restricted to one of these values.  These values must be valid for the data
                            type.&lt;p&gt;
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="access" type="FieldAccess" default="enabled">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        Defines the accessibility of the field. Defaults to {@link FieldAccess#ENABLED}.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="OAuth2FieldConfig">
        <xs:annotation>
            <xs:documentation xml:lang="en">
                Specification for an OAUTH field of information necessary in order to make connection.  An OAuth2
                field is actually a complex structure containing many sub-fields of information.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="authorizationTokenEndpoint" type="OAuth2EndpointFieldConfig" maxOccurs="1"
                        minOccurs="0">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property><jxb:javadoc>
                            Sub-field configuration pertaining to the authorization endpoint of the OAuth2 field.
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="authorizationParameters" type="OAuth2RequestParameterFieldConfigs" maxOccurs="1"
                        minOccurs="0">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property><jxb:javadoc>
                            Sub-field configuration for additional parameters required when interacting with the
                            authorization endpoint.
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="accessTokenEndpoint" type="OAuth2EndpointFieldConfig" maxOccurs="1" minOccurs="0">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property><jxb:javadoc>
                            Sub-field configuration pertaining to the access endpoint of the OAuth2 field.
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="accessTokenParameters" type="OAuth2RequestParameterFieldConfigs" maxOccurs="1"
                        minOccurs="0">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property><jxb:javadoc>
                            Sub-field configuration for additional parameters required when interacting with the
                            access endpoint.
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="scope" type="SubFieldConfig" maxOccurs="1" minOccurs="0">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property><jxb:javadoc>
                            Sub-field configuration for the OAuth2 scope.
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="grantType" type="SubFieldConfig" maxOccurs="1" minOccurs="0">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property><jxb:javadoc>
                            Sub-field configuration for the OAuth2 grant type.
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="OAuth2EndpointFieldConfig">
        <xs:annotation>
            <xs:documentation xml:lang="en">
                Common configuration for a specific endpoint as part of an OAuth2 field.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="url" type="SubFieldConfig" minOccurs="0">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property><jxb:javadoc>
                            Sub-field configuration for the endpoint url.
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="OAuth2RequestParameterFieldConfigs">
        <xs:annotation>
            <xs:documentation xml:lang="en">
                Common configuration for a collection of additional parameters required when interacting with the
                relevant endpoint in an OAuth2 field.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="parameter" maxOccurs="unbounded" minOccurs="0">
                <xs:annotation>
                    <xs:appinfo>
                        <jxb:property name="parameters"><jxb:javadoc>
                            Sub-field configuration for a collection of request parameters.
                        </jxb:javadoc></jxb:property>
                    </xs:appinfo>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="value" type="SubFieldConfig">
                            <xs:annotation>
                                <xs:appinfo>
                                    <jxb:property><jxb:javadoc>
                                        Sub-field configuration for the value of the parameter.
                                    </jxb:javadoc></jxb:property>
                                </xs:appinfo>
                            </xs:annotation>
                        </xs:element>
                    </xs:sequence>
                    <xs:attribute name="name" type="xs:string">
                        <xs:annotation>
                            <xs:appinfo>
                                <jxb:property><jxb:javadoc>
                                    The name of the parameter.
                                </jxb:javadoc></jxb:property>
                            </xs:appinfo>
                        </xs:annotation>
                    </xs:attribute>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="access" type="FieldAccess" default="enabled">
            <xs:annotation>
                <xs:appinfo>
                    <jxb:property><jxb:javadoc>
                        Defines the accessibility of all the parameters. Defaults to {@link FieldAccess#ENABLED}.
                    </jxb:javadoc></jxb:property>
                </xs:appinfo>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

</xs:schema>
