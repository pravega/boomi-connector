/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4.1/userguide/tutorial_java_projects.html
 */
plugins {
    id 'com.github.johnrengelman.shadow' version '5.1.0'
}

plugins {
    id "com.github.gradle-lean" version "0.1.2"
}

apply plugin: "distribution"
apply plugin: "java"
apply plugin: "maven"
apply plugin: "application"
apply plugin: "maven-publish"
apply plugin: 'com.github.johnrengelman.shadow'


configurations.all {
    // Check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}

/*allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://repository.apache.org/snapshots"
        }
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
        maven {
            url "file://C:/Users/chennv4/.m2"
        }
        jcenter()
    }
}
*/
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://repository.apache.org/snapshots"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
            url "file://C:/Users/chennv4/.m2"
        }
}


archivesBaseName = 'boomi-connector'

group = "com.boomi.connector.pravega"
version = samplesVersion

description = "boomi-connector"
mainClassName = "com.boomi.connector.pravega.HelloWorldWriter"
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile "io.pravega:pravega-client:${pravegaVersion}"
    compile "org.slf4j:slf4j-api:${slf4jApiVersion}"
    compile "ch.qos.logback:logback-classic:${logbackVersion}"
    compile "ch.qos.logback:logback-core:${logbackVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:2.9.1"
    compile "connector.sdk:connector.sdk.api:1.3.2"
    compile "connector.sdk:connector.sdk.util:1.3.2"
    compile "boomi.util:boomi.util:1.3.2"
    
 }

 shadowJar {
    classifier = 'SNAPSHOT'
    append('META-INF/connector-config')
    manifest {
        attributes 'Implementation-Version': project.version                
    }
    configurations = [project.configurations.compile]
    mergeServiceFiles()
    dependencies {
    //from(project.configurations.runtime)
    /*
    exclude(dependency('io.netty:netty-all:.*'))
    exclude(dependency('org.projectlombok:lombok'))
    exclude(dependency('com.google.guava:guava:26.0-android'))
    exclude(dependency('com.google.errorprone:error_prone_annotations:.*'))
    exclude(dependency('com.google.guava:failureaccess:.*'))
    exclude(dependency('org.checkerframework:checker-qual:.*'))
    exclude(dependency('com.google.guava:listenablefuture:.*'))
    exclude(dependency('com.google.errorprone:error_prone_annotations:.*'))
    exclude(dependency('com.google.j2objc:j2objc-annotations:.*'))
    exclude(dependency('org.codehaus.mojo:animal-sniffer-annotations:.*'))
    */
    exclude(dependency('connector.sdk:connector.sdk.api:.*'))
    exclude(dependency('connector.sdk:connector.sdk.util:.*'))
    exclude(dependency('boomi.util:boomi.util:.*'))     
    }
    
}

distributions {
    main {
        baseName = archivesBaseName
        contents {
            from(project.file('connector-descriptor.xml'))
            from(project.file('META-INF/*'))
            /*into('bin') {

            }*/
            into('lib') {
                //from(jar)
                from(project.configurations.runtime)
                from shadowJar
                from(project.configurations.shadow)
            }
            into('conf') {
                from(project.file('src/main/resources/logback.xml'))
            }
        }
    }

task buildZip(type: Zip) {
    from compileJava
    from processResources
    //exclude '**/shop/product/data/**'
    archiveFileName = "pravega-boomi-connector.zip"
    destinationDirectory = file("$buildDir/dist")
    from shadowJar
    include 'META-INF/**'
    include 'connector-descriptor'
}

/*task uberJar(type: Jar) {
    archiveClassifier = 'uber'

    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}*/

build.dependsOn buildZip

publishing {
    repositories {
        maven {
            credentials {
                username userName
                password passWord
            }
            url projectRepoUrl
        }
    }
    publications {
        shadow(MavenPublication) { publication ->
             project.shadow.component(publication)
            }
        }
    }
}